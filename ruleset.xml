<ruleset name="Vanio Coding Standards">
    <arg name="colors"/>
    <arg name="encoding" value="utf-8"/>
    <arg name="extensions" value="php"/>
    <arg name="ignore" value="var, vendor"/>
    <arg name="report-width" value="120"/>
    <config name="ignore_warnings_on_exit" value="1"/>

    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.Files.InlineHTML"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.BacktickOperator"/>
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.PHP.SAPIUsage"/>
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing"/>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="PEAR.Files.IncludingFile"/>
    <rule ref="PEAR.Formatting.MultiLineAssignment"/>
    <rule ref="Squiz.Classes.ClassFileName"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Commenting.ClassComment.SpacingAfter"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.NamingConventions.ValidFunctionName.DoubleUnderscore"/>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Squiz.PHP.Heredoc"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <rule ref="vendor/escapestudios/symfony2-coding-standard/Symfony/ruleset.xml">
        <exclude name="PEAR.Classes.ClassDeclaration"/><!-- covered by PSR2.Classes.ClassDeclaration -->
        <exclude name="PEAR.Commenting.InlineComment"/><!-- covered by Squiz.Commenting.InlineComment -->
        <exclude name="PEAR.WhiteSpace.ScopeClosingBrace"/><!-- covered by CodingStandards.WhiteSpace.ScopeClosingBrace -->
        <exclude name="PSR1.Methods.CamelCapsMethodName"/><!-- covered by CodingStandards.CodeAnalysis.ValidFunctionName -->
        <exclude name="PSR2.Methods.FunctionClosingBrace.SpacingBeforeClose"/><!-- covered by CodingStandards.WhiteSpace.ScopeClosingBrace -->
        <exclude name="Squiz.ControlStructures.ControlSignature.NewlineAfterOpenBrace"/><!-- {} is preferred over newline which is covered by CodingStandards.WhiteSpace.ScopeClosingBrace -->
        <exclude name="Squiz.Functions.FunctionDeclaration"/><!-- covered by Squiz.Functions.MultiLineFunctionDeclaration and CodingStandards.WhiteSpace.FunctionDeclarationOpeningBracket -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.NoSpaceBeforeArg"/><!-- covered by Symfony.WhiteSpace.CommaSpacing -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.NoSpaceBeforeHint"/><!-- covered by Symfony.WhiteSpace.CommaSpacing -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint"/><!-- covered by SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing.MultipleSpacesBetweenTypeHintAndParameter -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceSpacing"/><!-- covered by Generic.Functions.OpeningFunctionBraceBsdAllman.BraceSpacing -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace"/><!-- closing bracket and an opening brace on the same line is forbidden -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.SpaceBeforeOpenParen"/><!-- covers only functions with body, better covered by CodingStandards.WhiteSpace.FunctionDeclarationOpeningBracket -->
        <exclude name="Squiz.Scope.MethodScope"/><!-- unnecessary visibility on interface and test methods is forbidden which is covered by CodingStandards.Scope.MethodScope -->
        <exclude name="Squiz.WhiteSpace.ScopeClosingBrace"/><!-- covered by CodingStandards.WhiteSpace.ScopeClosingBrace -->
        <exclude name="Symfony.Arrays.MultiLineArrayComma"/><!-- covered by SlevomatCodingStandard.Arrays.TrailingArrayComma -->
        <exclude name="Symfony.Classes.MultipleClassesOneFile"/><!-- covered by PSR1.Classes.ClassDeclaration.MultipleClasses -->
        <exclude name="Symfony.Commenting.Annotations"/><!-- blank line between different annotation types is forbidden -->
        <exclude name="Symfony.Commenting.ClassComment.Missing"/><!-- class PHPDoc is not required -->
        <exclude name="Symfony.Commenting.FunctionComment"/><!-- covered by Squiz.Commenting.FunctionComment -->
        <exclude name="Symfony.Commenting.License"/><!-- @license tag is not required -->
        <exclude name="Symfony.ControlStructure.IdenticalComparison"/><!-- equal operator is allowed when loosely comparing arrays -->
        <exclude name="Symfony.ControlStructure.YodaConditions"/><!-- yoda conditions are forbidden -->
        <exclude name="Symfony.Formatting.ReturnOrThrow"/><!-- usage of elseif after if conditions which return or throw something is allowed -->
        <exclude name="Symfony.Functions.Arguments"/><!-- arguments on multiple lines are preferred over long lines -->
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidAbstractName"/><!-- abstract prefix and suffix is forbidden which is covered by SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming -->
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidInterfaceName"/><!-- interface prefix and suffix is forbidden which is covered by SlevomatCodingStandard.Classes.SuperfluousInterfaceNamingSniff -->
        <exclude name="Symfony.Objects.ObjectInstantiation"/><!-- instantiating classes with unnecessary parentheses is forbidden -->
        <exclude name="Symfony.Scope.MethodScope"/><!-- unnecessary visibility on interface and test methods is forbidden which is covered by CodingStandards.Scope.MethodScope -->
        <exclude name="Symfony.WhiteSpace.AssignmentSpacing"/><!-- covered by Squiz.WhiteSpace.OperatorSpacing -->
        <exclude name="Symfony.WhiteSpace.BinaryOperatorSpacing"/><!-- covered by Squiz.WhiteSpace.OperatorSpacing -->
        <exclude name="Symfony.WhiteSpace.DiscourageFitzinator"/><!-- covered by Squiz.WhiteSpace.SuperfluousWhitespace -->
        <exclude name="Zend.Files.ClosingTag"/><!-- covered by PSR2.Files.ClosingTag -->
    </rule>

    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming"/><!-- exception classes must end with "Exception" suffix which is covered by Symfony.NamingConventions.ValidClassName.InvalidExceptionName -->
        <exclude name="SlevomatCodingStandard.ControlStructures.AssignmentInCondition.AssignmentInCondition"/><!-- assignment in condition is allowed when there is no equal sign -->
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/><!-- equal operator is allowed when loosely comparing arrays -->
        <exclude name="SlevomatCodingStandard.ControlStructures.EarlyExit"/><!-- early exit is not preferred for short code, usage of elseif after if conditions which return or throw something is allowed -->
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/><!-- property PHPDoc must be written on one line when only one tag is present -->
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithParentheses.MissingParentheses"/><!-- instantiating classes with unnecessary parentheses is forbidden -->
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison"/><!-- yoda conditions are forbidden -->
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/><!-- needs further configuration, covered on runtime by PSR-4 -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation.NonFullyQualifiedClassName"/><!-- class and interface names must be unqualified -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/><!-- class and interface names must be unqualified -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/><!-- global constant references must be unqualified -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/><!-- global function references must be unqualified -->
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces"/><!-- all namespaces except root namespace are allowed to use -->
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration"/><!-- void return type hint is forbidden in test methods, covered by CodingStandards.TypeHints.TypeHintDeclaration -->
        <exclude name="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces"/><!-- covered by CodingStandards.WhiteSpace.EmptyLinesAroundTypeBraces -->
    </rule>

    <rule ref="Generic.Classes.DuplicateClassName">
        <exclude-pattern>AppKernel.php</exclude-pattern>
    </rule>

    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/><!-- empty catch statements are allowed -->
    </rule>

    <rule ref="Generic.Commenting.DocComment">
        <exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/><!-- inline PHPDoc is allowed -->
        <exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/><!-- inline PHPDoc is allowed -->
        <exclude name="Generic.Commenting.DocComment.MissingShort"/><!-- @param descriptions are not required -->
        <exclude name="Generic.Commenting.DocComment.NonParamGroup"/><!-- tag grouping is forbidden -->
        <exclude name="Generic.Commenting.DocComment.SpacingBeforeShort"/><!-- short description must be on the same line as @var -->
        <exclude name="Generic.Commenting.DocComment.SpacingBeforeTags"/><!-- blank lines in PHPDoc are forbidden -->
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/><!-- extra spacing alignment is forbidden -->
    </rule>

    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="absoluteLineLimit" value="0"/>
            <property name="lineLimit" value="120"/>
        </properties>
    </rule>

    <rule ref="Generic.PHP.DiscourageGoto">
        <type>error</type>
    </rule>

    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
        <exclude-pattern>DependencyInjection/Configuration.php</exclude-pattern>
    </rule>

    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>AppKernel.php</exclude-pattern>
    </rule>

    <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/><!-- disallows newline after opening brace which is allowed -->
    </rule>

    <rule ref="PSR2.Classes.ClassDeclaration">
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody"/><!-- covered by CodingStandards.WhiteSpace.EmptyLinesAroundTypeBraces.IncorrectEmptyLinesBeforeClosingBrace -->
        <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNotAlone"/><!-- {} is preferred over newline which is covered by CodingStandards.WhiteSpace.ScopeClosingBrace -->
    </rule>

    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.BreakNotNewLine"/><!-- covered by PSR2.ControlStructures.SwitchDeclaration.BodyOnNextLineCASE and Generic.Formatting.DisallowMultipleStatements -->
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.caseIndent"/><!-- covered by Generic.WhiteSpace.ScopeIndent.Incorrect -->
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.caseNotLower"/><!-- covered by Generic.PHP.LowerCaseKeyword.Found -->
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.defaultIndent"/><!-- covered by Generic.WhiteSpace.ScopeIndent.Incorrect -->
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFullyQualifiedGlobalClasses" value="true"/>
            <property name="allowPartialUses" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.PartialUse">
        <exclude-pattern>AppKernel.php</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing.IncorrectLinesCountBeforeFirstUse">
        <exclude-pattern>AppKernel.php</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <exclude name="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.DeclareStrictTypesMissing"/>

        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="-1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.IncorrectWhitespaceBetweenOpenTagAndDeclare">
        <message>Strict type declarations are forbidden</message>
    </rule>

    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/><!-- expects closing brace at the same level as opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/><!-- extra spacing alignment is forbidden -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/><!-- uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/><!-- single-value array written on multiple lines is preferred over long lines -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoSpaceAfterDoubleArrow"/> <!-- covered by Squiz.WhiteSpace.OperatorSpacing -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoSpaceBeforeDoubleArrow"/> <!-- covered by Squiz.WhiteSpace.OperatorSpacing -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NotLowerCase"/><!-- long array syntax is forbidden -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/><!-- multiple-value array can be written on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SpaceAfterKeyword"/><!-- long array syntax is forbidden -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/><!-- extra spacing alignment is forbidden -->
    </rule>

    <rule ref="Squiz.Commenting.BlockComment">
        <exclude name="Squiz.Commenting.BlockComment.WrongStart"/><!-- inline doc blocks are allowed -->
    </rule>

    <rule ref="Squiz.Commenting.FunctionComment">
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/><!-- requires long boolean and integer -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/><!-- requires long boolean and integer -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/><!-- PHPDoc is not required on all methods -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/><!-- @param descriptions are not required -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/><!-- @param tags are not required for satisfactorily type-hinted arguments which is covered by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/><!-- @return void is forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/><!-- covered by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/><!-- extra spacing alignment is forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/><!-- covered by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint -->
    </rule>

    <rule ref="Squiz.Commenting.FunctionComment.InvalidNoReturn">
        <message>Function has no return statement, but @return annotation is present</message>
    </rule>

    <rule ref="Squiz.Commenting.InlineComment">
        <exclude name="Squiz.Commenting.InlineComment.DocBlock"/><!-- inline doc blocks are allowed -->
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/><!-- end character is not forced -->
    </rule>

    <rule ref="Squiz.Commenting.VariableComment">
        <exclude name="Squiz.Commenting.VariableComment.Missing"/><!-- only @var tag is required which is covered by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingPropertyTypeHint -->
        <exclude name="Squiz.Commenting.VariableComment.MissingVar"/><!-- covered by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingPropertyTypeHint -->
        <exclude name="Squiz.Commenting.VariableComment.TagNotAllowed"/><!-- does not handle custom annotations -->
    </rule>

    <rule ref="Squiz.ControlStructures.SwitchDeclaration">
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent"/><!-- breaking statements must be indented to the same level as the case body -->
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.CaseNotLower"/><!-- covered by Generic.PHP.LowerCaseKeyword.Found -->
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.MissingDefault"/><!-- default statement is not always required -->
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.SpaceBeforeColonCase"/><!-- covered by PSR2.ControlStructures.SwitchDeclaration.SpaceBeforeColonCASE -->
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.SpacingAfterBreak"/><!-- blank line after case breaking statement is forbidden -->
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.SpacingAfterCase"/><!-- blank line = whitespace -->
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.SpacingBeforeBreak"/><!-- whitespace before break is sometimes allowed -->
    </rule>

    <rule ref="Squiz.Operators.IncrementDecrementUsage">
        <exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets"/><!-- brackets around increment/decrement operations are not required-->
    </rule>

    <rule ref="Squiz.PHP.DiscouragedFunctions">
        <type>error</type>
    </rule>

    <rule ref="Squiz.PHP.NonExecutableCode">
        <type>error</type>
    </rule>

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
        </properties>

        <exclude name="Squiz.WhiteSpace.FunctionSpacing.AfterLast"/><!-- covered by CodingStandards.WhiteSpace.EmptyLinesAroundTypeBraces.IncorrectEmptyLinesBeforeClosingBrace -->
        <exclude name="Squiz.WhiteSpace.FunctionSpacing.BeforeFirst"/><!-- covered by CodingStandards.WhiteSpace.EmptyLinesAroundTypeBraces.IncorrectEmptyLinesAfterOpeningBrace -->
    </rule>

    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacingBeforeFirst" value="0"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
</ruleset>
